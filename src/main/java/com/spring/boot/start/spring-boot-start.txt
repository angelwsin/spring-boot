
注解的使用

@Configuration  定义配置类 注解可以用java代码的形式实现spring中xml配置文件配置的效果

@EnableConfigurationProperties：属性类

@AutoConfigureAfter: 自动配置应在XXX的自动配置类之后应用。

@AutoConfigureBefore: 自动配置应在XXX的自动配置类之前应用

@AutoConfigureOrder：定义配置类执行的顺序

@ConditionalOnBean：当容器里有指定的Bean 时才生成

 

@ConditionalOnMissingBean：当容器里没有指定Bean 时才生成

@ConditionalOnClass：当类路径下有指定的类时才生成

@ConditionalOnMissingClass：当类路径下没有指定的类时才生成

@ConditionalOnExpression：基于SpEL 表达式作为判断条件。

@ConditionalOnJava：基于JVM 版本作为判断条件。

@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置。

@ConditionalOnProperty：指定的属性是否有指定的值。

@ConditionalOnResource：类路径是否有指定的值。

@ConditionalOnSingleCandidate：当指定Bean 在容器中只有一个，或者虽然有多个但是指定首选的Bean。

@ConditionalOnWebApplication：当前项目是Web 项目的条件下。

@ConditionalOnNotWebApplication：当前项目不是Web 项目的条件下。


属性配置的注解

@EnableConfigurationProperties 有两个功能 1）注解中的value的class 为打了注解是@ConfigurationProperties的配置类 2）注册属性处理器ConfigurationPropertiesBindingPostProcessor
@ConfigurationProperties，它可以把同类的配置信息自动封装成实体类  需要配合其他其他注解使用自己不会初始成beandefine  或者使用 autoconfig使用 import 会解析












     * org.springframework.context.ApplicationListener=
     org.springframework.boot.ClearCachesApplicationListener,7
     org.springframework.boot.builder.ParentContextCloserApplicationListener,6
     org.springframework.boot.context.FileEncodingApplicationListener,8
     org.springframework.boot.context.config.AnsiOutputApplicationListener,1
     org.springframework.boot.context.config.ConfigFileApplicationListener,0
     org.springframework.boot.context.config.DelegatingApplicationListener,5
     org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,3
     org.springframework.boot.context.logging.LoggingApplicationListener,2
     org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener,9
     * org.springframework.context.ApplicationListener=org.springframework.boot.autoconfigure.BackgroundPreinitializer,4


/Users/mac/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.3.RELEASE/spring-boot-autoconfigure-2.1.3.RELEASE.jar!/META-INF/spring-configuration-metadata.json


     org.springframework.boot.SpringApplication#run(java.lang.String...)



     spring-boot 统一管理入口  SpringApplication

     1）初始化话SpringApplication 读取默认的配置  目录 /META-INF/spring.factories
      加载默认的配置  ApplicationContextInitializer
                    ApplicationListener

     2）SpringApplicationRunListeners 启动事件监听器

     3）发送 ApplicationStartingEvent 事件

     LoggingApplicationListener(初始化日志配置),BackgroundPreinitializer,DelegatingApplicationListener（代理）,LiquibaseServiceLocatorApplicationListener（Liquibase问题）

     4） 根据 webApplicationType 创建不同的配置环境  ConfigurableEnvironment  配置环境中有不同阶段添加进入的一组 PropertySource   如：StubPropertySource("servletConfigInitParams")，RandomValuePropertySource {name='random'}


     5） 发送 ApplicationEnvironmentPreparedEvent 事件

     ConfigFileApplicationListener（默认配置中EnvironmentPostProcessor 读取配置文件加入到环境配置中
      加载路径顺序如下：
       file:./config/
       file:./
       classpath:/config/
       classpath:/
       默认的 applicaton.yml(xml或properties) 加入到配置环境中的属性中 得到active
       读取   applicaont-{active}.yml(xml或properties)加入到配置环境中的属性中

       {SystemEnvironmentPropertySourceEnvironmentPostProcessor(系统变量),
        SpringApplicationJsonEnvironmentPostProcessor（json配置 spring.application.json或SPRING_APPLICATION_JSON),
        CloudFoundryVcapEnvironmentPostProcessor（）,
        ConfigFileApplicationListener
       }），
     AnsiOutputApplicationListener，LoggingApplicationListener，ClasspathLoggingApplicationListener，
     BackgroundPreinitializer，
      DelegatingApplicationListener，FileEncodingApplicationListener

      6）创建上下文 createApplicationContext() =>ConfigurableApplicationContext :

        如 AnnotationConfigServletWebServerApplicationContext
           默认加入以下bean
           ConfigurationClassPostProcessor
           DefaultEventListenerFactory
           EventListenerMethodProcessor
           AutowiredAnnotationBeanPostProcessor
           CommonAnnotationBeanPostProcessor



       初始化 上下文   读取配置ApplicationContextInitializer
       DelegatingApplicationContextInitializer,SharedMetadataReaderFactoryContextInitializer
       ContextIdApplicationContextInitializer, ConfigurationWarningsApplicationContextInitializer,ServerPortInfoApplicationContextInitializer, ConditionEvaluationReportLoggingListener

      7) 发送 ApplicationContextInitializedEvent 事件

        BackgroundPreinitializer，DelegatingApplicationListener

      8) 处理 启动类

      9） 发送 ApplicationPreparedEvent 事件

      ConfigFileApplicationListener,LoggingApplicationListener,BackgroundPreinitializer,DelegatingApplicationListener

      10)AbstractApplicationContext#refresh刷新上下文  先处理 BeanDefinitionRegistryPostProcessor （优先级顺序）再处理 BeanFactoryPostProcessor


      BeanDefinitionRegistryPostProcessor  从之前Context默认的bean中查找 根据权重  PriorityOrdered（优先级高），Ordered（需要排序）,其他
        ConfigurationClassPostProcessor  解析配置  解析成 ConfigurationClass

        full
        @Configuration

        lite
        @Component
        @ComponentScans
        @Import
        @ImportResource
        @Bean

        @Conditional  指定在什么时期可以解析  PARSE_CONFIGURATION,REGISTER_BEAN;


        @PropertySources  读取属性配置文件 并注册到配置环境中
        @ComponentScans   扫描路径
        @Import
        @ImportResource
        @Bean

        @EnableAutoConfiguration  循环查找注解上的注解  @Import

        AutoConfigurationImportSelector.AutoConfigurationGroup#getAutoConfigurationMetadata"META-INF/spring-autoconfigure-metadata.properties" 加载
        @Configuration




       BeanFactoryPostProcessor
         SharedMetadataReaderFactoryContextInitializer.CachingMetadataReaderFactoryPostProcessor
         ConfigurationWarningsApplicationContextInitializer.ConfigurationWarningsPostProcessor
         ConfigFileApplicationListener.PropertySourceOrderingPostProcessor


       BeanPostProcessor 也分 PriorityOrdered，internal，Ordered，nonOrdered  优先级






       AnnotatedGenericBeanDefinition beanClass=beanClass  metadata= StandardAnnotationMetadata

       StandardAnnotationMetadata   introspectedClass=beanClass  annotations = introspectedClass.getAnnotations()

       ConfigurationClass   metadata=StandardAnnotationMetadata  beanName = beanNames

       ConfigurationClassParser.SourceClass  source=   metadata=



       ConfigurationClassPostProcessor 解析过程

       从 BeanDefinitionRegistry 中得到所有的候选BeanDefinition 中

       1）过滤 属性中没有 full == CONFIGURATION_CLASS_ATTRIBUTE = ConfigurationClassPostProcessor.configurationClass &&
                        lite == CONFIGURATION_CLASS_ATTRIBUTE = ConfigurationClassPostProcessor.configurationClass

        (full = 类注解有Configuration)
       （lite = 类注解有Component或ComponentScan或Import或ImportResource 方法上有注解Bean）

       2) 填充 ConfigurationClassCandidate 符合 full 或 lite的条件

       3）ConfigurationClassParser 解析 ConfigurationClassCandidate中的beandefiniton
          org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass
          查看是否有注解@Conditional 可以自定义过滤条件

       4) a.否有@Component注解？递归解析内部类org.springframework.context.annotation.ConfigurationClassParser#processMemberClasses 解析出内部类到第3)步
          b.解析注解 @PropertySources  加载对用路径下的属性文件 填充到 environment 中
          c.解析注解 @ComponentScans   扫描basepackage 的类解析成 ScannedGenericBeanDefinition 注册到registry中 并把扫描得到的类到第3)进行解析
          d.解析注解 注解上的注解直到解析到@Import注解 得到属性value是ImportSelector的子类   递归循环解析 （注解上的注解） 含有Import的类中的属性value到第3)步解析
            实例化@Import注解中的value=AutoConfigurationImportSelector中的类 选择Group为 AutoConfigurationGroup
            org.springframework.context.annotation.ConfigurationClassParser.DeferredImportSelectorGrouping#getImports
              org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.AutoConfigurationGroup#process
              加载AutoConfigurationMetadataLoader路径："META-INF/spring-autoconfigure-metadata.properties"
              org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#getCandidateConfigurations 加载META-INF/spring.factories路径中的EnableAutoConfiguration
              通过配置文件META-INF/spring.factories中的候选和@EnableAutoConfiguration注解中需要排除的 得到一部分
              再通过剩下的部分和META-INF/spring-autoconfigure-metadata.properties 中的进行META-INF/spring.factories路径中AutoConfigurationImportFilter匹配得到最终的
              例如默认的有：OnBeanCondition,OnClassCondition,OnWebApplicationCondition 过滤过程
              OnBeanCondition 过滤

              得到最终的到第3)步
          e.解析注解 @ImportResource
          f.解析注解 方法上的注解@Bean
          g.解析类上的接口中的 方法上注解@Bean
          h.解析类的superclass到第3)步



    解析过程：

     1)从BeanDefinitionRegistry得到初始的 beandefine 进行过滤 full lite 得到初始要处理的 候选beandefine

     2)使用ConfigurationClassParser 进行解析
       检查是否需要跳过Conditional
       a. @Component 查看内部类 如果有先解析内部类 2）

       b. @PropertySources 解析对应属性文件 保存到 环境配置environment中

       c. @ComponentScans  解析要扫描得类 解析成beandefine 注册到BeanDefinitionRegistry中并进行解析 2）

       d. @Import          查找要解析的类上注解中没有Import注解,类上没有继续向类上注解上查找是否有 一层一层查找

                           xx)得到Import注解中value 处理逻辑
                           1.ImportSelector的子类
                               如果是DeferredImportSelector 的类型
                                 a)deferredImportSelectors集合为空的情况下 初始化 grouping=AutoConfigurationGroup（加载路径META-INF/spring.factories）并把
                                 DeferredImportSelector 注册到grouping中 然后processGroupImports 处理grouping中的import
                                 grouping 中加载下面的 imports 根据注解AutoConfigureAfter,AutoConfigureBefore 依赖关系排序 先后顺序  然后     xx)
                                 b)deferredImportSelectors集合为空的情况下 加入到集合中
                              不是DeferredImportSelector 的类型
                                 调用selector.selectImports 的方法得到importClassNames 集合后  xx)
                           2.ImportBeanDefinitionRegistrar的子类
                               实例化ImportBeanDefinitionRegistrar的子类 添加到importBeanDefinitionRegistrars集合中

                           3.其他
                             作为ConfigClass 并且上层ConfigClass添加到importedBy中 说明此ConfigClass不需要注册成bean  继续解析 2）
       e. @ImportResource   解析配置路径下的资源，注册配置的BeanDefinitionReader和对应的资源

       f. @Bean             解析方法上的注解 注册到beanMethods

       g. 解析接口中方法中 @Bean 中的注解  一层一层接口查找

       h. 查找父类 一层一层查找解析 2）

    3）deferredImportSelectorHandler 对之前注册的deferredImportSelectors集合中的Selector解析 grouping xx)

    4) loadBeanDefinitions  从解析的configClasses集合中


注册beandefinitions
configClass
1)!this.importedBy.isEmpty()   注册此bean AnnotatedGenericBeanDefinition
2)BeanMethods()                配置bean ConfigurationClassBeanDefinitionReader.ConfigurationClassBeanDefinition
3)importedResources(@ImportResource)  xml 配置文件解析XmlBeanDefinitionReader
4)ImportBeanDefinitionRegistrars(ImportBeanDefinitionRegistrar的子类)  调用对应的registerBeanDefinitions方法注册








    d.1 grouping AutoConfigurationGroup的过滤逻辑

      autoConfigurationMetadata = 加载路径META-INF/spring.factories

      configurations = "META-INF/spring.factories" 下的 EnableAutoConfiguration

      a) configurations 排除 @EnableAutoConfiguration 中的配置
      b) filer 过滤   filter 从 META-INF/spring.factories中加载 AutoConfigurationImportFilter
      org.springframework.boot.autoconfigure.condition.OnBeanCondition,\
       configurations 中的class.ConditionalOnBean 组成key从autoConfigurationMetadata 查找
       上面查找为空继续下面
       configurations 中的class.ConditionalOnSingleCandidate 组成key从autoConfigurationMetadata 查找
      org.springframework.boot.autoconfigure.condition.OnClassCondition,\ （1）
       class.ConditionalOnClass 组成key
      org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition
      class.ConditionalOnWebApplication 组成key
     得到value对应的class 进行加载没有对应的类 说明不加载过滤掉



     Conditional 过滤  过滤结果使用ConditionOutcome


     DataSourceAutoConfiguration 自动配置过程

     查看内部类的

     EmbeddedDatabaseConfiguration 配置 上设置了过滤条件EmbeddedDatabaseCondition  中使用PooledDataSourceCondition 过滤条件

     PooledDataSourceCondition 过滤逻辑是满足 内部的过滤条件

     属性过滤 @ConditionalOnProperty(prefix = "spring.datasource", name = "type") 要满足

     PooledDataSourceAvailableCondition DataSource driver 正常加载


     满足上面任意一个说明是使用PooledDataSource 而不是EmbeddedDatabase


     而是选用了 PooledDataSourceConfiguration

     容器中如果存在 DataSource 则跳过







     例子解析过程：

     Example 加载类上的注解 EnableAutoConfiguration  注解的上一层查找 查找到@Import 中的AutoConfigurationImportSelector

     AutoConfigurationImportSelector 是DeferredImportSelector的子类并且deferredImportSelectors为空初始化 得到 AutoConfigurationGroup 加载

     META-INF/spring.factories 和 META-INF/spring-autoconfigure-metadata.properties 和过滤条件得到如下的集合 继续解析

grouping.getImports() = {ArrayList@5489}  size = 22
 0 = {DeferredImportSelector$Group$Entry@5491}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration"
 1 = {DeferredImportSelector$Group$Entry@5492}
  metadata = {StandardAnnotationMetadata@3894}
   annotations = {Annotation[2]@5513}
   nestedAnnotationsAsMap = true
   introspectedClass = {Class@537} "class com.spring.boot.start.Example"
  importClassName = "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration"
 2 = {DeferredImportSelector$Group$Entry@5493}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration"
 3 = {DeferredImportSelector$Group$Entry@5494}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration"
 4 = {DeferredImportSelector$Group$Entry@5495}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration"
 5 = {DeferredImportSelector$Group$Entry@5496}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration"
 6 = {DeferredImportSelector$Group$Entry@5497}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration"
 7 = {DeferredImportSelector$Group$Entry@5498}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration"
 8 = {DeferredImportSelector$Group$Entry@5499}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration"
 9 = {DeferredImportSelector$Group$Entry@5500}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration"
 10 = {DeferredImportSelector$Group$Entry@5501}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration"
 11 = {DeferredImportSelector$Group$Entry@5502}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration"
 12 = {DeferredImportSelector$Group$Entry@5503}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration"
 13 = {DeferredImportSelector$Group$Entry@5504}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration"
 14 = {DeferredImportSelector$Group$Entry@5505}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration"
 15 = {DeferredImportSelector$Group$Entry@5506}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration"
 16 = {DeferredImportSelector$Group$Entry@5507}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration"
 17 = {DeferredImportSelector$Group$Entry@5508}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration"
 18 = {DeferredImportSelector$Group$Entry@5509}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration"
 19 = {DeferredImportSelector$Group$Entry@5510}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration"
 20 = {DeferredImportSelector$Group$Entry@5511}
  metadata = {StandardAnnotationMetadata@3894}
  importClassName = "org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration"
 21 = {DeferredImportSelector$Group$Entry@5544}
 metadata = {StandardAnnotationMetadata@3894}
 importClassName = "org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration"




<groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-loader</artifactId>


spring-boot-loader   加载模块


mvn archetype:generate -DgroupId=cai -DappName=beast-test -DartifactId=beast-test -Dpackage="com.thebeastshop.test" -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-base -DarchetypeVersion=0.0.1-SNAPSHOT -X -DarchetypeCatalog=local



mvn archetype:generate -DgroupId=vfenv -DappName=virus -DartifactId=virus -Dpackage="com.vfenv.virus" -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-base -DarchetypeVersion=0.0.1-SNAPSHOT -X -DarchetypeCatalog=local


matchFound =
                (allowEagerInit || !isFactoryBean ||(dbd != null && !mbd.isLazyInit()) ||
                containsSingleton(beanName))
                &&(includeNonSingletons ||(dbd != null ? mbd.isSingleton() : isSingleton(beanName))) &&
                isTypeMatch(beanName, type)

                BeanFactory  可以默认会提前初始化






